Create New Table Address(id, street, city)
Add New column in Student Table : address_id

Student and Address table is having one to one relationship

Student table is at owning side as it has foreign key (address_id)
Address table is at non-owning side

Create Address Entity and Repository

---------------------------------------------------------------------------
Add adress through /create API

In CreateStudentRequest add 2 new fields (street, city)
handle this in StudentResponse also.

In StudentService.js
-> AutoWired AddressRepository to take care of storing data in Address Table
-> on CreateStudent method - follow below steps in exact order.
   - take address data from request
   - save it on address table
   - save address_id in student Entity so student data will have address id
   - save student data in student table
   
POST http://localhost:8080/api/student/create
{
    "first_name": "John",
  	"lastName" : "Cena",
 	"email": "johncena@gmail.com",
 	"street":"jewels",
 	"city": "Dubai"
}

---------------------------------------------------------------------------

Join Query

SELECT * FROM `student` s INNER JOIN `address` a on s.address_id = a.id where a.city = "Dubai";

method proxy in student Repository
List<Student> findByAddressCity(String city);

GET http://localhost:8080/api/student/get-by-city/dubai

Response
[
	{
		"id": 23,
		"lastName": "Cena",
		"email": "johncena@gmail.com",
		"fullName": "John Cena",
		"street": "jewels",
		"city": "Dubai",
		"first_name": "John"
	},
	{
		"id": 25,
		"lastName": "Salt",
		"email": "Rock3@gmail.com",
		"fullName": "Rock Salt",
		"street": "SunflowerStreet",
		"city": "Dubai",
		"first_name": "Rock"
	}
]


JPQL in student Repository
List<Student> getByAddressCity(String city);

GET http://localhost:8080/api/student/get-by-city/jpql/delhi

Response
[
	{
		"id": 24,
		"lastName": "Charley",
		"email": "james23@gmail.com",
		"fullName": "James Charley",
		"street": "Rohini",
		"city": "Delhi",
		"first_name": "James"
	},
	{
		"id": 26,
		"lastName": "Patel",
		"email": "Ramesh453@gmail.com",
		"fullName": "Ramesh Patel",
		"street": "Rajivchowlk",
		"city": "Delhi",
		"first_name": "Ramesh"
	}
]


For Info:
If we use, 
List<Student> findByAddress(Address address);
then it will give only one result 
as there is one to one relation between student and address


-------------------------------------------------------------------------------