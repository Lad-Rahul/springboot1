Create New Table Address(id, street, city)
Add New column in Student Table : address_id

Student and Address table is having one to one relationship

Student table is at owning side as it has foreign key (address_id)
Address table is at non-owning side

Create Address Entity and Repository

---------------------------------------------------------------------------
Add adress through /create API

In CreateStudentRequest add 2 new fields (street, city)
handle this in StudentResponse also.

In StudentService.js
-> AutoWired AddressRepository to take care of storing data in Address Table
-> on CreateStudent method - follow below steps in exact order.
   - take address data from request
   - save it on address table
   - save address_id in student Entity so student data will have address id
   - save student data in student table
   
POST http://localhost:8080/api/student/create
{
    "first_name": "John",
  	"lastName" : "Cena",
 	"email": "johncena@gmail.com",
 	"street":"jewels",
 	"city": "Dubai"
}

---------------------------------------------------------------------------

Join Query

SELECT * FROM `student` s INNER JOIN `address` a on s.address_id = a.id where a.city = "Dubai";

method proxy in student Repository
List<Student> findByAddressCity(String city);

GET http://localhost:8080/api/student/get-by-city/dubai

Response
[
	{
		"id": 23,
		"lastName": "Cena",
		"email": "johncena@gmail.com",
		"fullName": "John Cena",
		"street": "jewels",
		"city": "Dubai",
		"first_name": "John"
	},
	{
		"id": 25,
		"lastName": "Salt",
		"email": "Rock3@gmail.com",
		"fullName": "Rock Salt",
		"street": "SunflowerStreet",
		"city": "Dubai",
		"first_name": "Rock"
	}
]


JPQL in student Repository
List<Student> getByAddressCity(String city);

GET http://localhost:8080/api/student/get-by-city/jpql/delhi

Response
[
	{
		"id": 24,
		"lastName": "Charley",
		"email": "james23@gmail.com",
		"fullName": "James Charley",
		"street": "Rohini",
		"city": "Delhi",
		"first_name": "James"
	},
	{
		"id": 26,
		"lastName": "Patel",
		"email": "Ramesh453@gmail.com",
		"fullName": "Ramesh Patel",
		"street": "Rajivchowlk",
		"city": "Delhi",
		"first_name": "Ramesh"
	}
]


For Info:
If we use, 
List<Student> findByAddress(Address address);
then it will give only one result 
as there is one to one relation between student and address


-------------------------------------------------------------------------------

Lazy Loading in JPA

Hibernate: select s1_0.id,s1_0.address_id,s1_0.email,s1_0.first_name,s1_0.last_name from student s1_0 left join address a1_0 on a1_0.id=s1_0.address_id where a1_0.city=?
Hibernate: select a1_0.id,a1_0.city,a1_0.street from address a1_0 where a1_0.id=?
Hibernate: select a1_0.id,a1_0.city,a1_0.street from address a1_0 where a1_0.id=?

in above example of join method, it is making 3 SQL Query request, 
1st one is for join query,
next 2 are to get address Info for each student in response
as there are 2 students in response.

There are 2 type of Fetching method
1. EAGER
2. LAZY

byDefault FetchType is EAGER,
on fetching of student's data JPA will fire query to get corresponding 
address detail, even if address details is not needed 
this is overload on an API, it has impact on performance.
 
When FetchType is LAZY,
it will not fire query to fetch associated address data, 
it will just have proxy object of address,
when it is explicitly asked for address data then only it will fire query
to get address data, (when get method is called in studentResponse's constructor)  

Have to provide this on Relationship annontation
ex, in Student Entity class

@OneToOne(fetch = FetchType.LAZY)
@JoinColumn(name = "address_id")
private Address address;

----------------------------------------------------------------------------------------

getById query on Address table before and after bi-directional relationship

Before:
select a1_0.id,a1_0.city,a1_0.street from address a1_0 where a1_0.id=?

After:
select a1_0.id,a1_0.city,a1_0.street,s1_0.id,s1_0.email,s1_0.first_name,s1_0.last_name from address a1_0 left join student s1_0 on a1_0.id=s1_0.address_id where a1_0.id=?

To set bi-directional relation, 
have to add mappedBy with Relationship annontation at non-owning side of Entity.

Ex, here Address is non-owning side of relationship
So in Address Entity class, need to add

@OneToOne(mappedBy = "address")
private Student student;

// "address" is a variable name used in Student Entity for OneToOne Mapping

--------------------------------------------------------------------------------------------------

ManytoOne Relationship

One Student can learn multiple subject
There is one to many relationship between student and subject
There is many to one relationship between subject and student 

create Subject Table (id, subject_name, marks_obtained, student_id)
here student_id is foreign key

create Subject Entity Class with student variable (join with student_id)

In Student Entity class,
Add subjects variable (mapped by student varible of subject) to get subjects associated with student

create SubjectRepository for database handling

create CreateSubjectRequest Class to handle Request payload
in CreateStudentRequest Class, add subjects as List of CreateSubjectRequest,
	to handle subject payload in create student request
	
	
create SubjectResposne class
In StudentResposne Class, add subjects as List of CreateSubjectResponse.

In StudentService, handle CreateStudent Request with subject in payload.

From subjectRequest List, collect subject data, map subject with student,
store all subject in subject database with student_id
After that add subjectList in student Entity class




Hibernate: insert into address (city,street) values (?,?)
Hibernate: insert into student (address_id,email,first_name,last_name) values (?,?,?,?)
Hibernate: insert into subject (marks_obtained,student_id,subject_name) values (?,?,?)
Hibernate: insert into subject (marks_obtained,student_id,subject_name) values (?,?,?)

POST http://localhost:8080/api/student/create

Request
{
    "first_name": "Ajay",
  	"lastName" : "Shrivastav",
 	"email": "Ajaysh@gmail.com",
 	"street":"Karolbagh",
 	"city": "Delhi",
  	"subjects" : [
    	{
      		"subjectName" : "Java",
      		"marksObtained" : 75.00
    	},
    	{
      		"subjectName" : "SQL",
      		"marksObtained" : 81.00
    	}
  	]
}
